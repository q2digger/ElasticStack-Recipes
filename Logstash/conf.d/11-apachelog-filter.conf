filter {
  if [type] == "apache_log" or [fields][document_type] == "apache_log" {
    grok {
      match => { "message" =>
        [
          "%{COMBINEDXFFXSSLAPACHELOG}",
          "%{COMBINEDXFFAPACHELOG2}",
          "%{COMBINEDXFFAPACHELOG}",
          "%{COMBINEDAPACHELOG1}",
          "%{COMMONAPACHELOG1}",
          "%{ERRORAPACHELOG}"
        ]
      }
      patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
    }
    
    mutate {
      gsub => [
        "apache_xclientip", "\"-\"", "-",
        "apache_xclientip", "\"", "",
        "apache_xsslprotocol", "\"-\"", "-",
        "apache_xsslprotocol", "\"", "",
        "apache_xsslcipher", "\"-\"", "-",
        "apache_xsslcipher", "\"", ""
      ]
    }
    
    if [apache_xclientip] and [apache_xclientip] != "-" {
      geoip {
        database => "/opt/logstash/GeoLite2-City.mmdb"
        source => "apache_xclientip"
      }
    }
    
    grok {
      match => {
        "source" =>
          [
            "%{GREEDYDATA}/(%{HOSTNAME}-)?%{NOTSPACE:apache_log_type}"
          ]
      }
    }
    
    mutate {
      gsub => [
        "apache_log_type", "_log", "",
        "apache_log_type", "\.log", ""
      ]
    }
    
    date {
      match => [ "apache_err_timestamp", "E MMM dd HH:mm:ss yyyy" ]
      target => "@timestamp"
      add_field => { "debug_timestamp" => "timestampMatched"}
    }
    date {
      match => [ "apache_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      add_field => { "debug_timestamp" => "timestampMatched"}
    }
    ruby {
      code => "event.set('lag_seconds', Time.now.to_f - event.get('@timestamp').to_f)"
    }
    if [lag_seconds] > 5184000  {
      drop { }
    }
  }

}

