filter {
  if [type] == "redactor_log" or [fields][document_type] == "redactor_log" {
    grok {
      match => {
        "message" => [
          "%{JVM_TIMESTAMP:redactor_timestamp}%{SPACE}%{WORD:redactor_dockercontainerid}%{SPACE}\[%{NOTSPACE:redactor_thread}\]%{SPACE}%{LOGLEVEL:redactor_loglevel}%{SPACE}%{SUPERGREEDYDATA:redactor_loginfo}"
          
        ]
      }
      patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
    }
    
    grok {
      match => {
        "redactor_loginfo" => [
          "%{NOTSPACE:redactor_action} - %{IPORHOST:redactor_clientip} %{USER:redactor_identity} %{USER:redactor_auth} \[%{HTTPDATE:redactorhttp_timestamp}\] \"(?:%{WORD:redactor_verb} %{NOTSPACE:redactor_request}(?: HTTP/%{NUMBER:redactor_httpversion})?|%{DATA:redactor_rawrequest})\" %{NUMBER:redactor_response} (?:%{NUMBER:redactor_bytes}|-) id=%{NOTSPACE:reactor_requestid}",
          "%{NOTSPACE:redactor_action} - Request %{NOTSPACE:redactor_requestid} - took: %{NUMBER:redactor_responsetime_ms}",
          "%{SUPERGREEDYDATA}"
        ]
      }
      patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
    }

    date {
      match => ["redactor_timestamp","yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
      add_field => { "debug_timestamp" => "timestampMatched"}
    }
    ruby {
      code => "event.set('lag_seconds', Time.now.to_f - event.get('@timestamp').to_f)"
    }
    if [lag_seconds] > 5184000  {
      drop { }
    }
  }

}
