filter {
  if [type] == "haproxy_log" or [fields][document_type] == "haproxy_log" {
    grok {
      match => {
        "message" => [
          "%{SYSLOGTIMESTAMP:haproxy_timestamp} %{IPORHOST:haproxy_server} %{SYSLOGPROG}: %{IP:haproxy_client_ip}:%{INT:haproxy_client_port} \[%{HAPROXY_TIMESTAMP:haproxy_accept_date}\] %{GREEDYDATA:haproxy_loginfo}",
          "%{SYSLOGTIMESTAMP:haproxy_timestamp} %{IPORHOST:haproxy_server} %{SYSLOGPROG}: Connect from %{IP:haproxy_client_ip}:%{INT:haproxy_client_port} to %{IP:haproxy_dest_ip}:%{INT:haproxy_dest_port} \(%{NOTSPACE:haproxy_backend}/%{WORD:haproxy_ipprotocol}\)"
        ]
      }
      patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
    }
    
    if [haproxy_loginfo] {
      grok {
        match => {
          "haproxy_loginfo" => [
            "%{NOTSPACE:haproxy_frontend_name} %{NOTSPACE:haproxy_backend_name}/%{NOTSPACE:haproxy_server_name} %{INT:haproxy_time_request}/%{INT:haproxy_time_queue}/%{INT:haproxy_time_backend_connect}/%{INT:haproxy_time_backend_response}/%{NOTSPACE:haproxy_time_duration} %{INT:haproxy_http_status_code} %{NOTSPACE:haproxy_bytes_read} %{DATA:haproxy_captured_request_cookie} %{DATA:haproxy_captured_response_cookie} %{NOTSPACE:haproxy_termination_state} %{INT:haproxy_actconn}/%{INT:haproxy_feconn}/%{INT:haproxy_beconn}/%{INT:haproxy_srvconn}/%{NOTSPACE:haproxy_retries} %{INT:haproxy_srv_queue}/%{INT:haproxy_backend_queue}( %{NOTSPACE:haproxy_ssl_protocol}? %{NOTSPACE:haproxy_ssl_cipher})? \"(<BADREQ>|(%{WORD:haproxy_http_verb} (%{URIPROTO:haproxy_http_proto}://)?(?:%{USER:haproxy_http_user}(?::[^@]*)?@)?(?:%{URIHOST:haproxy_http_host})?(?:%{URIPATHPARAM:haproxy_http_request})?( HTTP/%{NUMBER:haproxy_http_version})?))?\"?",
            "%{NOTSPACE:haproxy_frontend_name} %{NOTSPACE:haproxy_backend_name}/%{NOTSPACE:haproxy_server_name} %{INT:haproxy_time_queue}/%{INT:haproxy_time_backend_connect}/%{NOTSPACE:haproxy_time_duration} %{NOTSPACE:haproxy_bytes_read} %{NOTSPACE:haproxy_termination_state} %{INT:haproxy_actconn}/%{INT:haproxy_feconn}/%{INT:haproxy_beconn}/%{INT:haproxy_srvconn}/%{NOTSPACE:haproxy_retries} %{INT:haproxy_srv_queue}/%{INT:haproxy_backend_queue}",
            "%{GREEDYDATA}"
          ]
        }
        patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
      }
    }
    
    if [haproxy_client_ip] {
      if [haproxy_client_ip] !~ /^192\.168\./ or [haproxy_client_ip] !~ /^127\.0\.0\.1/ {
        geoip {
          database => "/opt/logstash/GeoLite2-City.mmdb"
          source => "haproxy_client_ip"
        }
      }
    }
    
    date {
      match => ["haproxy_timestamp","MMM  d HH:mm:ss","MMM dd HH:mm:ss"]
      target => "@timestamp"
      add_field => { "debug_timestamp" => "timestampMatched"}
    }
    ruby {
      code => "event.set('lag_seconds', Time.now.to_f - event.get('@timestamp').to_f)"
    }
    if [lag_seconds] > 5184000  {
      drop { }
    }
  }

}
