filter {
  if [type] == "docconverter_log" or [fields][document_type] == "docconverter_log" {
    grok {
      match => {
        "message" => [
          "%{JVM_TIMESTAMP:docconverter_timestamp}%{SPACE}%{WORD:docconverter_dockercontainerid}%{SPACE}\[%{NOTSPACE:docconverter_thread}\]%{SPACE}%{WORD:docconverter_loglevel}%{SPACE}%{SUPERGREEDYDATA:docconverter_loginfo}"
        ]
      }
      patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
    }
    
    grok {
      match => {
        "docconverter_loginfo" => [
          "%{NOTSPACE:docconverter_action} - %{IPORHOST:docconverter_clientip} %{USER:docconverter_identity} %{USER:docconverter_auth} \[%{HTTPDATE:docconverterhttp_timestamp}\] \"(?:%{WORD:docconverter_verb} %{NOTSPACE:docconverter_request}(?: HTTP/%{NUMBER:docconverter_httpversion})?|%{DATA:docconverter_rawrequest})\" %{NUMBER:docconverter_response} (?:%{NUMBER:docconverter_bytes}|-) id=%{NOTSPACE:reactor_requestid}",
          "%{NOTSPACE:docconverter_action} - Request %{NOTSPACE:docconverter_requestid} - took: %{NUMBER:docconverter_responsetime_ms}",
          "%{SUPERGREEDYDATA}"
        ]
      }
      patterns_dir => [ "./patterns", "/opt/logstash/conf.d/patterns", "/etc/logstash/patterns" ]
    }

    date {
      match => ["docconverter_timestamp","yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
      add_field => { "debug_timestamp" => "timestampMatched"}
    }
    ruby {
      code => "event.set('lag_seconds', Time.now.to_f - event.get('@timestamp').to_f)"
    }
    if [lag_seconds] > 5184000  {
      drop { }
    }
  }

}
